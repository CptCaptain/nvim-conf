local wk = require('which-key')
wk.add({
    { "<F10>", "<cmd>lua require('dap').step_over()<cr>", desc = "Step over" },
    { "<F11>", "<cmd>lua require('dap').step_into()<cr>", desc = "Step into" },
    { "<F12>", "<cmd>lua require('dap').step_out()<cr>", desc = "Step out" },
    { "<F5>", "<cmd>lua require('dap').continue()<cr>", desc = "Continue" },
    { "<LocalLeader>L", desc = "<cmd>lua VimtexPDFToggle()<cr>" },
    { "<leader><leader>s", "<cmd>source ~/.config/nvim/snippets/snips.lua <cr>", desc = "Source LuaSnips" },
    { "<leader>ca", desc = "<cmd>lua vim.lsp.buf.code_action()<cr>" },
    { "<leader>d", group = "Debug" },
    { "<leader>db", group = "Breakpoints" },
    { "<leader>dbc", "<cmd>lua require('dap').set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>", desc = "Breakpoint Condition" },
    { "<leader>dbm", "<cmd>lua require('dap').set_breakpoint({ nil, nil, vim.fn.input('Log point message: ') })<CR>", desc = "Log Point Message" },
    { "<leader>dc", "<cmd>lua require('dap').scopes()<CR>", desc = "Scopes" },
    { "<leader>dh", group = "Hover" },
    { "<leader>dhh", "<cmd>lua require('dap.ui.variables').hover()<CR>", desc = "Hover" },
    { "<leader>dhv", "<cmd>lua require('dap.ui.variables').visual_hover()<CR>", desc = "Visual Hover" },
    { "<leader>di", "<cmd>lua require('dap').toggle()<CR>", desc = "Toggle" },
    { "<leader>dr", group = "Repl" },
    { "<leader>drl", "<cmd>lua require('dap').repl.run_last()<CR>", desc = "Run Last" },
    { "<leader>dro", "<cmd>lua require('dap').repl.toggle()<CR>", desc = "Toggle" },
    { "<leader>dt", group = "Test" },
    { "<leader>dtm", "<cmd>lua require('dap-python').test_method()<cr>", desc = "Test method" },
    { "<leader>dtr", "<cmd>lua require('dap-python').test_method()<cr>", desc = "Run Test" },
    { "<leader>du", group = "UI" },
    { "<leader>duf", "local widgets=require('dap.ui.widgets');widgets.centered_float(widgets.scopes)<CR>", desc = "Float" },
    { "<leader>duh", "<cmd>lua require('dap.ui.widgets').hover()<CR>", desc = "Hover" },
    { "<leader>dup", "<cmd>lua require('dap.ui.widgets').preview()<cr>", desc = "Preview" },
    { "<leader>dut", "<cmd>lua require('dapui').toggle()<cr>", desc = "Toggle UI" },
    { "<leader>f", group = "Telescope" },
    { "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "buffers" },
    { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "find_files" },
    { "<leader>fg", "<cmd>Telescope live_grep<cr>", desc = "live_grep" },
    { "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "help_tags" },
    { "<leader>fm", "<cmd>Telescope marks<cr>", desc = "marks" },
    { "<leader>fn", "<cmd>enew<cr>", desc = "New File" },
    { "<leader>fp", "<cmd>Telescope projects<cr>", desc = "Recent Projects" },
    { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "MRU" },
    { "<leader>g", group = "Gitsigns" },
    { "<leader>gB", "<cmd>Gitsigns toggle_current_line_blame<cr>", desc = "Toggle current line blame" },
    { "<leader>gP", "<cmd>Gitsigns preview_hunk_inline<cr>", desc = "Preview hunk" },
    { "<leader>gb", "<cmd>Gitsigns blame_line<cr>", desc = "Blame line" },
    { "<leader>gd", "<cmd>Gitsigns diffthis<cr>", desc = "Diff this" },
    { "<leader>gn", "<cmd>Gitsigns next_hunk<cr>", desc = "Next hunk" },
    { "<leader>gp", "<cmd>Gitsigns prev_hunk<cr>", desc = "Prev hunk" },
    { "<leader>i", "<cmd>Portal jumplist forward<cr>", desc = "Portal forward" },
    { "<leader>lg", "<cmd>LazyGit<cr>", desc = "LazyGit" },
    { "<leader>n", group = "Tree" },
    { "<leader>nC", "<cmd>NvimTreeCollapse<cr>", desc = "Collapse all" },
    { "<leader>nc", "<cmd>NvimTreeCollapseKeepBuffers<cr>", desc = "Collapse unused dirs" },
    { "<leader>nf", "<cmd>NvimTreeFocus<cr>", desc = "Focus Tree" },
    { "<leader>nt", "<cmd>NvimTreeToggle<cr>", desc = "Toggle Tree" },
    { "<leader>o", "<cmd>Portal jumplist backward<cr>", desc = "Portal backward" },
    { "<leader>q", group = "Persistence" },
    { "<leader>qd", "<cmd>lua require('persistence').stop()<cr>", desc = "stop Persistence => session won't be saved on exit" },
    { "<leader>ql", "<cmd>lua require('persistence').load({ last = true })<cr>", desc = "restore the last session" },
    { "<leader>qs", "<cmd>lua require('persistence').load()<cr>", desc = "restore the session for the current directory" },
    { "<leader>s", "<cmd>SymbolsOutline<cr>", desc = "Toggle Symbols" },
    { "<leader>t", "<cmd>TroubleToggle<cr>", desc = "Toggle Trouble" },
    { "<leader>u", "<cmd>UndotreeToggle<cr><cmd>UndotreeFocus<cr>", desc = "Toggle Undotree" },
    {
      "<c-k>",
      function () local ls = require('luasnip') if ls.expand_or_jumpable() then ls.expand_or_jump() end end,
      desc = "Expand Snippet",
      mode = { "i", "s" },
    },
    {
      mode = { "n", "v" },
      { "<leader>m", "<cmd>TSJToggle<cr>", desc = "Toggle Splitline" },
      { "<leader>p", '"+p', desc = "Paste from clipboard" },
      { "<leader>y", '"+y', desc = "Yank to clipboard" },
    },
  })

return {
  "folke/which-key.nvim",
  lazy = false,
  config = function()
    vim.o.timeout = true
    vim.o.timeoutlen = 300
    require("which-key").setup {
      -- your configuration comes here
    }
  end
}
